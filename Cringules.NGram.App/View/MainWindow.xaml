<Window x:Class="Cringules.NGram.App.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Cringules.NGram.App.View"
        xmlns:vm="clr-namespace:Cringules.NGram.App.ViewModel"
        xmlns:res="clr-namespace:Cringules.NGram.App.Resources"
        xmlns:export="clr-namespace:Cringules.NGram.App.Export"
        xmlns:oxy="http://oxyplot.org/wpf"
        xmlns:conv="clr-namespace:NKristek.Wpf.Converters;assembly=NKristek.Wpf.Converters"
        mc:Ignorable="d"
        Title="{x:Static res:Strings.MainWindowTitle}" Height="800" Width="1200" MinHeight="600" MinWidth="800"
        FontSize="14">
    <Window.DataContext>
        <vm:MainViewModel />
    </Window.DataContext>
    <Window.Resources>
        <conv:BoolToInverseBoolConverter x:Key="InverseBoolConverter" />
        <conv:ValueNullToVisibilityConverter x:Key="NullVisibilityConverter" />
        <conv:ValueNullToInverseVisibilityConverter x:Key="InverseNullVisibilityConverter" />
        <conv:ValueNullToInverseBoolConverter x:Key="NullInverseBoolConverter"></conv:ValueNullToInverseBoolConverter>
        <export:PdfResultExporter x:Key="PdfResultExporter" />
        <export:EmfResultExporter x:Key="EmfResultExporter" />
    </Window.Resources>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="{x:Static res:Strings.File}">
                <MenuItem Header="{x:Static res:Strings.ImportData}"
                          Command="{Binding ImportDataCommand}" />
                <MenuItem Header="{x:Static res:Strings.Open}"
                          Command="{Binding OpenSessionCommand}" />
                <MenuItem Header="{x:Static res:Strings.Close}"
                          Command="{Binding CloseSessionCommand}" />
                <MenuItem Header="{x:Static res:Strings.Save}"
                          Command="{Binding SaveSessionCommand}" />
                <MenuItem Header="{x:Static res:Strings.SaveAs}"
                          Command="{Binding SaveSessionAsCommand}" />
                <MenuItem Header="{x:Static res:Strings.ExportAs}">
                    <MenuItem Header="E_xcel" />
                    <MenuItem Header="_PDF" Command="{Binding ExportAsCommand}"
                              CommandParameter="{StaticResource PdfResultExporter}" />
                    <MenuItem Header="E_MF" Command="{Binding ExportAsCommand}"
                              CommandParameter="{StaticResource EmfResultExporter}" />
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static res:Strings.Analysis}"
                      DataContext="{Binding Session}">
                <MenuItem Header="{x:Static res:Strings.StartAnalysis}"
                          Command="{Binding StartAnalysisCommand}" />
            </MenuItem>
        </Menu>
        <Grid>
            <Grid Visibility="{Binding Session, Converter={StaticResource NullVisibilityConverter}}">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Width="500">
                    <TextBlock Text="{x:Static res:Strings.Welcome}" FontSize="25" TextWrapping="Wrap"
                               TextAlignment="Center" />
                    <Grid Height="100">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Button Content="{x:Static res:Strings.ImportData}"
                                Command="{Binding ImportDataCommand}" Margin="5" />
                        <Button Grid.Column="1" Content="{x:Static res:Strings.Open}"
                                Command="{Binding OpenSessionCommand}" Margin="5" />
                    </Grid>
                </StackPanel>
            </Grid>
            <Grid DataContext="{Binding Session}"
                  Visibility="{Binding ., Converter={StaticResource InverseNullVisibilityConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="3*" />
                    <RowDefinition Height="2*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TabControl SelectedIndex="{Binding PeakShown}">
                    <TabItem Header="{x:Static res:Strings.MainPlotTabHeader}">
                        <oxy:PlotView Model="{Binding Model}"
                                      Controller="{Binding PlotController}" />
                    </TabItem>
                    <TabItem Header="{x:Static res:Strings.PeakPlotTabHeader}"
                             IsEnabled="{Binding SelectedPeak, Converter={StaticResource NullInverseBoolConverter}}">
                        <oxy:PlotView Model="{Binding PeakModel}" />
                    </TabItem>
                </TabControl>
                <DataGrid Grid.Row="1" Grid.Column="0" ItemsSource="{Binding Peaks}" IsReadOnly="True"
                          SelectedItem="{Binding SelectedPeak}" AutoGenerateColumns="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="{x:Static res:Strings.Angle}"
                                            Binding="{Binding Angle, StringFormat={x:Static res:Strings.AngleDegreesTemplate}}" />
                        <DataGridTextColumn Header="{x:Static res:Strings.Distance}"
                                            Binding="{Binding Distance, StringFormat={x:Static res:Strings.DistanceAngstromTemplate}}" />
                        <DataGridTextColumn Header="{x:Static res:Strings.MaxIntensity}"
                                            Binding="{Binding MaxIntensity, StringFormat={x:Static res:Strings.IntensityAbsoluteUnitsTemplate}}" />
                        <DataGridTextColumn Header="{x:Static res:Strings.IntergralIntensity}"
                                            Binding="{Binding IntegralIntensity, StringFormat={x:Static res:Strings.IntensityAbsoluteUnitsTemplate}}" />
                        <DataGridTextColumn Header="{x:Static res:Strings.FullWidthHalfMaximum}"
                                            Binding="{Binding FullWidthHalfMaximum, StringFormat={x:Static res:Strings.AngleDegreesTemplate}}" />
                        <DataGridTextColumn Header="{x:Static res:Strings.IntegralWidth}"
                                            Binding="{Binding IntegralWidth, StringFormat={x:Static res:Strings.AngleDegreesTemplate}}" />
                        <DataGridTextColumn Header="{x:Static res:Strings.ApproximatedIntegralIntensity}"
                                            Binding="{Binding ApproximatedIntegralIntensity, StringFormat={x:Static res:Strings.IntensityAbsoluteUnitsTemplate}}" />
                        <DataGridTextColumn Header="{x:Static res:Strings.ApproximationAccuracy}"
                                            Binding="{Binding ApproximationAccuracy}" />

                    </DataGrid.Columns>
                </DataGrid>
                <StackPanel Grid.Row="0" Grid.Column="1" Grid.RowSpan="2" Margin="5">
                    <Button Content="{x:Static res:Strings.StartAnalysis}"
                            Command="{Binding StartAnalysisCommand}" Height="50" FontSize="20" />
                    <ListBox>
                        <ListBox.Resources>
                            <Style TargetType="Expander">
                                <Setter Property="IsExpanded"
                                        Value="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ListBoxItem}}" />
                            </Style>
                        </ListBox.Resources>
                        <ListBox.Template>
                            <ControlTemplate TargetType="ListBox">
                                <ItemsPresenter />
                            </ControlTemplate>
                        </ListBox.Template>
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">
                                            <ContentPresenter Content="{TemplateBinding Content}" />
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBoxItem>
                            <Expander Header="{x:Static res:Strings.WaveLength}">
                                <StackPanel>
                                    <TextBlock
                                        Text="{Binding WaveLength, StringFormat={x:Static res:Strings.SelectedWaveLength}}"
                                        TextWrapping="Wrap" />
                                    <Button Content="{x:Static res:Strings.Select}"
                                            Command="{Binding GetWaveLengthCommand}" />
                                </StackPanel>
                            </Expander>
                        </ListBoxItem>
                        <ListBoxItem>
                            <Expander Header="{x:Static res:Strings.Smoothing}">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding SmoothingEnabled}">
                                        <TextBlock Text="{x:Static res:Strings.EnableSmoothing}"
                                                   TextWrapping="Wrap" />
                                    </CheckBox>
                                    <local:NumericSlider
                                        Label="{x:Static res:Strings.SmoothingDegree}"
                                        Value="{Binding SmoothingDegree, Mode=TwoWay}"
                                        Minimum="{Binding MinSmoothingDegree}" Maximum="{Binding MaxSmoothingDegree}"
                                        IsEnabled="{Binding SmoothingEnabled}"/>
                                </StackPanel>
                            </Expander>
                        </ListBoxItem>
                        <ListBoxItem>
                            <Expander Header="{x:Static res:Strings.PeakAddition}">
                                <StackPanel>
                                    <Button Content="{x:Static res:Strings.Select}"
                                            Command="{Binding SelectPeakCommand}" />
                                    <Button Content="{x:Static res:Strings.Cancel}"
                                            Command="{Binding CancelSelectionCommand}" />
                                    <Button Content="{x:Static res:Strings.AddPeak}" Command="{Binding AddPeakCommand}" />
                                </StackPanel>
                            </Expander>
                        </ListBoxItem>
                        <ListBoxItem
                            IsEnabled="{Binding SelectedPeak, Converter={StaticResource NullInverseBoolConverter}}"
                            IsSelected="{Binding PeakShown}">
                            <Expander Header="{x:Static res:Strings.PeakApproximation}"
                                      DataContext="{Binding SelectedPeak}">
                                <StackPanel>
                                    <Label Content="{x:Static res:Strings.ApproximationFunction}" />
                                    <ComboBox ItemsSource="{Binding AvailableApproximators}"
                                              SelectedItem="{Binding Approximator}"
                                              IsEnabled="{Binding DetermineApproximator, Converter={StaticResource InverseBoolConverter}}"
                                              DisplayMemberPath="Name" />
                                    <CheckBox IsChecked="{Binding AutomaticApproximation}">
                                        <TextBlock Text="{x:Static res:Strings.DetermineCoefficientsAutomatically}"
                                                   TextWrapping="Wrap" />
                                    </CheckBox>
                                    <StackPanel
                                        IsEnabled="{Binding AutomaticApproximation, Converter={StaticResource InverseBoolConverter}}">
                                        <local:NumericSlider Label="{x:Static res:Strings.Height}"
                                                             Value="{Binding Height, UpdateSourceTrigger=PropertyChanged}"
                                                             Minimum="0" Maximum="100" />
                                        <local:NumericSlider Label="{x:Static res:Strings.Width}"
                                                             Value="{Binding Width, UpdateSourceTrigger=PropertyChanged}"
                                                             Minimum="0" Maximum="100" />
                                        <local:NumericSlider Label="{x:Static res:Strings.Corr}"
                                                             Value="{Binding Corr, UpdateSourceTrigger=PropertyChanged}"
                                                             Minimum="0" Maximum="100" />
                                        <local:NumericSlider Label="{x:Static res:Strings.Lambda}"
                                                             Value="{Binding Lambda, UpdateSourceTrigger=PropertyChanged}"
                                                             Minimum="0" Maximum="10" />
                                    </StackPanel>
                                    <Button Content="{x:Static res:Strings.Approximate}" Command="{Binding ApproximateCommand}"></Button>
                                </StackPanel>
                            </Expander>
                        </ListBoxItem>
                    </ListBox>
                </StackPanel>
            </Grid>
        </Grid>
    </DockPanel>
</Window>
